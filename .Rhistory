ggplot(mpg,aes(displ, fill=drv))+
geom_histogram(binwidth = 0.5)
ggplot(mpg,aes(displ, fill=drv))+
geom_histogram(binwidth = 0.5) +
facet_wrap(~drv, ncol=1)
ggplot(economics, aes(date, unemploy / pop)) +
geom_line()
ggplot(economics, aes(date, unempmed)) +
geom_line()
ggplot(economics, aes(date, uempmed)) +
geom_line()
ggplot(economics, aes(unemploy / pop, uempmed)) +
geom_path() +
geom_point()
ggplot(economics, aes(unemploy / pop, uempmed)) +
geom_path()
year <- function(x) as.POSIXlt(x)$year +1900
ggplot(economics, aes(unemploy / pop, uempmed)) +
geom_path(colour="grey50") +
geom_point(aes(colour=year(date))
)
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_boxplot()
ggplot(mpg, aes(cty, hwy)) + geom_histogram()
ggplot(mpg, aes(cty, hwy)) + geom_bar()
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_jitter()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_violin()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(cty, hwy)) +
geom_point()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(manufacturer)) +
geom_bar()
drugs <- data.frame(
drug= c("a", "b", "c"),
effect = c(4.2, 9.7, 6.1)
)
ggplot(drugs, aes(drug, effect)) + geom_bar(stat="identity")
ggplot(drugs, aes(drug, effect)) + geom_bar()
ggplot(mpg, aes(cty, hwy)) + geom_bar(stat = "identity")
ggplot(mpg, aes(cty, hwy)) + geom_bar(stat = "identity") + geom_smooth()
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_point() + geom_smooth()
ggplot(mpg, aes(class, hwy)) +
geom_boxplot()
ggplot(mpg, aes(reorder(class, hwy)) +
geom_boxplot()
ggplot(mpg, aes(reorder(class, hwy))) +
geom_boxplot()
ggplot(mpg, aes(reorder(class, hwy))) +
geom_boxplot()
ggplot(mpg, aes(reorder(class, hwy) , hwy)) +
geom_boxplot()
?reorder
ggplot(diamonds, aes(carat)) +
geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 5)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 15)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 2)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 5)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 20)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 9)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 30)
ggplot(diamonds, aes(carat)) +
geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 2.5)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 1)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = .5)
ggplot(diamonds, aes(carat)) +
geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = .25)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = .33)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = .1)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = .01)
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = .05)
diamonds
ggplot(diamonds, aes(price)) +
geom_histogram()
ggplot(diamonds, aes(price, cut)) +
geom_point()
install.packages(osmar)
install.packages("osmar")
install.packages("prettymapr")
library(osmar)
library(prettymapr)
wolfville <- searchbbox("wolfville, ns", source="google")
wolfville
?searchbbox
wolfville <- searchbbox("wolfville, ns")
wolfville
wolfville <- c(wv[1], wv[2], wv[3], wv[4])
names(wolfville) <- c("left", "bottom",
"right", "top")
wolfville
class(wolfville) <- "bbox"
wolfville
osmdata <- get_osm(wolfville)
osmdata
osmdata <- get_osm(wolfville)
wolfville <- searchbbox("wolfville, ns",
source="google")
wolfville <- c(wv[1], wv[2], wv[3], wv[4])
names(wolfville) <- c("left", "bottom",
"right", "top")
class(wolfville) <- "bbox"
wolfville
osmdata <- osmar::get_osm(wolfville)
osmdata <- get_osm(wolfville)
wolfville <- searchbbox("wolfville, ns",
source="google")
wolfville <- c(wv[1], wv[2], wv[3], wv[4])
names(wolfville) <- c("left", "bottom",
"right", "top")
class(wolfville) <- "bbox"
wolfville
wolfville <- searchbbox("wolfville, ns")
wolfville <- c(wv[1], wv[2], wv[3], wv[4])
names(wolfville) <- c("left", "bottom",
"right", "top")
class(wolfville) <- "bbox"
osmdata <- get_osm(wolfville)
wolfville
src <-  osmsource_api()
get_osm(node(18961430), source=src
)
get_osm(node(18961430), source=src)
devtools::install_github("ropensci/osmdata")
library(osmar)
src <-  osmsource_api()
get_osm(node(18961430), source=src)
src <- osmsource_api(url = "https://api.openstreetmap.org/api/0.6/")
get_osm(node(18961430), source=src)
test <-  get_osm(node(18961430), source=src)
test
sydney <-  searchbbox("sydney, nsw")
sydney
sydney <- c(wv[1], wv[2], wv[3], wv[4])
names(sydney) <- c("left", "bottom",
"right", "top")
class(sydney) <- "bbox"
osmdata <- osmar::get_osm(sydney)
sydney
test <-  get_osm(node(18961430), source=src)
test
summary(test$nodes)
class(sydney) <- "bbox"
osmdata <- osmar::get_osm(sydney)
bb <- center_bbox(174.76778, -36.85056, 700, 700)
ua <- get_osm(bb, source = src)
ua
summary(ua$nodes)
summary(ua$ways)
summary(ua$ammenities)
summary(ua$ammenity)
summary(ua$relation)
ts_ids <- find(ua, node(tags(v == "traffic_signals")))
> bs_ids <- find(ua, node(tags(v %agrep% "busstop")))
bs_ids <- find(ua, node(tags(v %agrep% "busstop")))
bs_ids
sydney <-  searchbbox("sydney, nsw")
sydney
sydney <- c(wv[1], wv[2], wv[3], wv[4])
names(sydney) <- c("left", "bottom",
"right", "top")
class(sydney) <- "bbox"
syd <- get_osm(sydney, source=src)
library(tidyverse)
library(forcats)
library(lubridate)
library(scales)
library(ggraph)
library(tidygraph)
library(maps)
##this is a theme called base_plot. It strips out a lot of the additional chart styling contained in ggplot
base_plot <- theme(plot.title = element_text(family = "Helvetica", face="bold", size=15, colour="Black"),
plot.subtitle = element_text(family = "Helvetica", face="plain", size=10,  colour="Black"),
plot.caption = element_text(family = "Helvetica", face="plain", size=4,  colour="Black"),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour="#E5E5E5"),
panel.grid.minor = element_blank(),
rect=element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_line(colour="#E5E5E5"),
axis.ticks.length=unit(.1, "cm"),
axis.text.x  =element_text(family = "Helvetica", face="plain", size=6, hjust =.5, colour="#7F7F7F"),
axis.text.y  =element_text(family = "Helvetica", face="plain", size=6, hjust =1, colour="#7F7F7F"),
axis.title.x  =element_blank(),
axis.title.y   =element_blank(),
axis.line= element_line(colour="#E5E5E5"),
axis.line.y= element_line(size=.25),
strip.text.x = element_text(family = "Helvetica", face="plain", size=10, colour="#7F7F7F")
)
base_plot <- theme(plot.title = element_text(family = "Helvetica", face="bold", size=15, colour="Black"),
plot.subtitle = element_text(family = "Helvetica", face="plain", size=10,  colour="Black"),
plot.caption = element_text(family = "Helvetica", face="plain", size=4,  colour="Black"),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour="#E5E5E5"),
panel.grid.minor = element_blank(),
rect=element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_line(colour="#E5E5E5"),
axis.ticks.length=unit(.1, "cm"),
axis.text.x  =element_text(family = "Helvetica", face="plain", size=6, hjust =.5, colour="#7F7F7F"),
axis.text.y  =element_text(family = "Helvetica", face="plain", size=6, hjust =1, colour="#7F7F7F"),
axis.title.x  =element_blank(),
axis.title.y   =element_blank(),
axis.line= element_line(colour="#E5E5E5"),
axis.line.y= element_line(size=.25),
strip.text.x = element_text(family = "Helvetica", face="plain", size=10, colour="#7F7F7F")
)
##creating random data
values <-  runif(6, min=120, max=180)
values <- as_tibble(values)
month <- as_tibble(c("01-May-18", "01-Jun-18", "01-Jul-18", "01-Aug-18", "01-Sep-18", "01-Oct-18"))
##creating new data frame for example
data  <- bind_cols(values, month) %>%
select(value1, value) %>%
rename (Date =  value1,
Number = value) %>%
mutate(Date = dmy(Date))
##creating the base chart used in the example
base <-  ggplot (data, aes(Date, Number )) +
geom_col(fill="Black") +
base_plot +
labs(title="This is your heading for the Chart. Make it interesting",
subtitle = "This is where some commentary about the chart goes. This will help your reader focus on what is
important or what you'd like them to notice",
caption = "This is where you cite your data or state other important caveats ")
base
cues <-  ggplot (data, aes(Date, Number )) +
geom_col(fill="Black") +
base_plot +
labs(title="This is your heading for the Chart. Make it interesting",
subtitle = "This is where some commentary about the chart goes. This will help your reader focus on what is
important or what you'd like them to notice",
caption = "This is where you cite your data or state other important caveats") +
theme(plot.title = element_text(colour="Gray78"),
plot.subtitle = element_text(colour="Gray78"),
plot.caption = element_text(colour="Gray78"),
panel.grid.major.y = element_line(colour="Gray78"),
axis.ticks.x=element_line(colour="Gray78"),
axis.ticks.length=unit(.1, "cm"),
axis.text.x  =element_text(colour="Gray78"),
axis.text.y  =element_text(colour="Gray78"),
axis.line= element_line(colour="Gray78"),
axis.line.y= element_line(size=.1),
strip.text.x = element_text(colour="Gray78"))
cues
value1 <-  runif(80, min=-80, max=90)
value1 <- as_tibble(value1)
value2 <-  runif(80, min=-80, max=90)
value2 <- as_tibble(value2)
cartdata <-bind_cols(value1, value2)
caretesian <- ggplot(cartdata, aes(value, value1)) +
geom_point(size=4, alpha=.7)+
coord_cartesian()+
xlim(-100, 100) +
ylim(-100, 100) +
base_plot +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank()) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
caretesian
install.packages("maps", "tidyverse")
install.packages("maps", "tidyverse")
install.packages("maps", "tidyverse")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
remove.packages("scales")
install.packages("scales")
install.packages("scales")
library(tidyverse)
library(lubridate)
library(scales)
library(maps)
france
france <- map_data("france")
france
geo <- ggplot(france, aes(long, lat, group=group)) +
geom_polygon() +
# coord_quickmap() +
base_plot +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())
geo
geo <- ggplot(france, aes(long, lat, group=group)) +
geom_polygon() +
coord_quickmap() +
base_plot +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())
geo
polar <- ggplot(diamonds) +
geom_bar(
mapping = aes(cut),
show.legend = FALSE,
width = 1,
fill="black"
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL) +
coord_polar()+
base_plot
polar <- ggplot(diamonds) +
geom_bar(aes(cut), show.legend = FALSE, width = 1, fill="black") +
# theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL) +
coord_polar()+
base_plot
polar
polar <- ggplot(diamonds) +
geom_bar(aes(cut), show.legend = FALSE, width = 1, fill="black") +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL) +
coord_polar()+
base_plot
polar
context
context <-  ggplot (data, aes(Date, Number )) +
geom_col(fill="Gray78") +
base_plot +
labs(title="This is your heading for the Chart. Make it interesting",
subtitle = "This is where some commentary about the chart goes. This will help your reader focus on what is
important or what you'd like them to notice",
caption = "This is where you cite your data or state other important caveats ") +
theme(plot.title = element_text(colour="Black"),
plot.subtitle = element_text(colour="Black"),
plot.caption = element_text(colour="Black"),
panel.grid.major.y = element_line(colour="Gray78"),
axis.ticks.x=element_line(colour="Gray78"),
axis.ticks.length=unit(.1, "cm"),
axis.text.x  =element_text(colour="Gray78"),
axis.text.y  =element_text(colour="Gray78"),
axis.line= element_line(colour="Gray78"),
axis.line.y= element_line(colour="Black", size=.1),
strip.text.x = element_text(colour="Gray78"))
context
log1 <-  runif(6, min=20000, max=50000)
log1 <- as_tibble(log1)
log2 <-  runif(6, min=200, max=500)
log2 <- as_tibble(log2)
log3 <-  runif(6, min=200, max=500)
log3 <- as_tibble(log3)
log4 <-  runif(6, min=200, max=800)
log4 <- as_tibble(log4)
month <- as_tibble(c("01-May-18", "01-Jun-18", "01-Jul-18", "01-Aug-18", "01-Sep-18", "01-Oct-18"))
logex <- bind_cols(log1, log2, log3, log4, month) %>%
rename("Item 1" = value,
"Item 2" = value1,
"Item 3" = value2,
"Item 4" = value3,
Date = value4) %>%
mutate(Date = ymd(Date)) %>%
gather(key=Item, value=value, -Date)
logscale
logscale <- ggplot(logex, aes(Date, value, colour=Item)) +
geom_line()+
base_plot
logscale
logscale2 <- ggplot(logex, aes(Date, value, colour=Item)) +
geom_line() +
scale_y_log10() +
base_plot
logscale2
library(tidyverse)
library(lubridate)
library(ggraph)
# library(tidygraph)
library(scales)
setwd("~/Documents/GitHub/Hellomister_DataBlog")
cookExample <- read_csv("cookExample.csv")
cook_edge <- cookExample %>%
mutate(from = 1770) %>%
select(from, Dedication_Year, Figure, Monument_Type) %>%
rename(to=Dedication_Year) %>%
mutate(to=as.numeric(to)) %>%
group_by(Figure, Monument_Type, from, to) %>%
summarise(weight = n()) %>%
na.omit()
cook_tidy <- tbl_graph(edges=cook_edge, directed = TRUE)
library(tidyverse)
library(lubridate)
library(ggraph)
library(tidygraph)
library(scales)
setwd("~/Documents/GitHub/Hellomister_DataBlog")
cookExample <- read_csv("cookExample.csv")
# prepare edge file
cook_edge <- cookExample %>%
mutate(from = 1770) %>%
select(from, Dedication_Year, Figure, Monument_Type) %>%
rename(to=Dedication_Year) %>%
mutate(to=as.numeric(to)) %>%
group_by(Figure, Monument_Type, from, to) %>%
summarise(weight = n()) %>%
na.omit()
# View(cook_edge)
cook_tidy <- tbl_graph(edges=cook_edge, directed = TRUE)
cook1 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Figure), alpha=.5) +
theme_bw()
cook1
cook2 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Monument_Type), alpha=.5) +
theme_bw()
cookExample
cookExample <- read_csv("https://raw.githubusercontent.com/KellyTall/Hellomister_DataBlog/master/cookExample.csv")
cookExample
cookExample <- read_csv("https://raw.githubusercontent.com/KellyTall/Hellomister_DataBlog/master/cookExample.csv")
cookExample <- readr::read_csv("https://raw.githubusercontent.com/KellyTall/Hellomister_DataBlog/master/cookExample.csv")
write_csv(cookExample, "cookExample.csv")
cookExample
View(cookExample)
View(cook_edge)
le
cook_edge <- cookExample %>%
mutate(from = 1770) %>%
select(from, Dedication_Year, Figure, Monument_Type) %>%
rename(to=Dedication_Year) %>%
mutate(to=as.numeric(to)) %>%
group_by(Figure, Monument_Type, from, to) %>%
summarise(weight = n()) %>%
na.omit()
View(cook_edge)
cook_tidy
cook_tidy <- tbl_graph(edges=cook_edge, directed = TRUE)
cook_tidy
cook1 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc()
cook1
cook2 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight)) +
theme_bw()
cook2
cook2 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight))
cook3 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight), alpha=.5)
cook3
cook2
cook3 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight), alpha=.5)
cook3
cook2 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight))
cook2
cook3 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight), alpha=.5)
cook3
cook_edge
cook4 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Figure), alpha=.5) +
theme_bw()
cook4
cook4
cook4 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Figure), alpha=.5)
cook4
cook4 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Figure), alpha=.5) +
theme_bw()
cook4
cook4 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Figure), alpha=.5)
cook4
cook5 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Figure), alpha=.5) +
theme_bw()
cook5
cook6 <- ggraph(cook_tidy, layout = 'linear') +
geom_edge_arc(aes(width=weight, colour=Monument_Type), alpha=.5) +
theme_bw()
cook6
